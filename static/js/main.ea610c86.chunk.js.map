{"version":3,"sources":["components/DrumPad.js","resources/padData.js","components/DrumMachine.js","App.js","serviceWorker.js","index.js"],"names":["DrumPad","id","src","name","setTriggered","className","onClick","audio","document","getElementById","currentTime","play","padData","DrumMachine","triggered","map","pad","key","App","useState","setAudio","getAttribute","window","addEventListener","e","toUpperCase","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sPAoBeA,G,MAlBC,SAAC,GAAmC,IAAlCC,EAAiC,EAAjCA,GAAIC,EAA6B,EAA7BA,IAAKC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,aAS7B,OACI,yBAAKC,UAAU,WAAWJ,GAAIE,EAAMG,QARjB,WACnBF,EAAaD,GACb,IAAMI,EAAQC,SAASC,eAAeR,GACtCM,EAAMG,YAAc,EACpBH,EAAMI,SAKF,2BAAIV,GACJ,2BAAOC,IAAKA,EAAKG,UAAU,OAAOJ,GAAIA,EAAIE,KAAMA,OCd/CS,EAAU,CACnB,CAACX,GAAI,IAAKE,KAAM,OAAQD,IAAK,oBAC7B,CAACD,GAAI,IAAKE,KAAM,OAAQD,IAAK,oBAC7B,CAACD,GAAI,IAAKE,KAAM,QAASD,IAAK,qBAC9B,CAACD,GAAI,IAAKE,KAAM,OAAQD,IAAK,oBAC7B,CAACD,GAAI,IAAKE,KAAM,UAAWD,IAAK,uBAChC,CAACD,GAAI,IAAKE,KAAM,OAAQD,IAAK,oBAC7B,CAACD,GAAI,IAAKE,KAAM,QAASD,IAAK,qBAC9B,CAACD,GAAI,IAAKE,KAAM,OAAQD,IAAK,oBAC7B,CAACD,GAAI,IAAKE,KAAM,MAAOD,IAAK,oBCYjBW,EAfK,SAAC,GAA+B,IAA9BC,EAA6B,EAA7BA,UAAWV,EAAkB,EAAlBA,aAC7B,OACI,yBAAKH,GAAG,WACJ,yBAAKI,UAAU,eACVO,EAAQG,KAAI,SAAAC,GACT,OAAO,kBAAC,EAAD,CAASf,GAAIe,EAAIf,GAAIC,IAAKc,EAAId,IAAKe,IAAKD,EAAIf,GAAIE,KAAMa,EAAIb,KAAMC,aAAcA,QAK7F,uBAAGC,UAAU,aAAaS,KC4CvBI,MAxDf,WAAgB,IAAD,EACqBC,mBAAS,IAD9B,mBACNL,EADM,KACKV,EADL,KAGPgB,EAAW,SAACH,GAChB,IAAMV,EAAQC,SAASC,eAAeQ,GACtCb,EAAaG,EAAMc,aAAa,SAChCd,EAAMG,YAAc,EACpBH,EAAMI,QAwCR,OAFAW,OAAOC,iBAAiB,WAnCD,SAACC,GACtB,IAAIP,EAAMO,EAAEP,IAAIQ,cAChB,OAAOR,GACH,IAAK,IAGL,IAAK,IAGL,IAAK,IAGL,IAAK,IAGL,IAAK,IAGL,IAAK,IAGL,IAAK,IAGL,IAAK,IAGL,IAAK,IACDG,EAASH,GACT,MACJ,QACE,WAON,yBAAKZ,UAAU,MAAMJ,GAAG,gBACtB,kBAAC,EAAD,CAAaa,UAAWA,EAAWV,aAAcA,MCzCnCsB,QACW,cAA7BJ,OAAOK,SAASC,UAEe,UAA7BN,OAAOK,SAASC,UAEhBN,OAAOK,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFxB,SAASC,eAAe,SDyHpB,kBAAmBwB,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ea610c86.chunk.js","sourcesContent":["import React from 'react'\n\nconst DrumPad = ({id, src, name, setTriggered}) => {\n\n    const handlePlayClip = () => {\n        setTriggered(name)\n        const audio = document.getElementById(id)\n        audio.currentTime = 0\n        audio.play()\n    }\n\n    return (\n        <div className=\"drum-pad\" id={name} onClick={handlePlayClip}>\n            <p>{id}</p>\n            <audio src={src} className='clip' id={id} name={name}></audio>\n\n        </div>\n    )\n}\n\nexport default DrumPad","export const padData = [\n    {id: 'Q', name: 'boom', src: './clips/boom.wav'},\n    {id: 'W', name: 'clap', src: './clips/clap.wav'},\n    {id: 'E', name: 'hihat', src: './clips/hihat.wav'},\n    {id: 'A', name: 'kick', src: './clips/kick.wav'},\n    {id: 'S', name: 'openhat', src: './clips/openhat.wav'},\n    {id: 'D', name: 'ride', src: './clips/ride.wav'},\n    {id: 'Z', name: 'snare', src: './clips/snare.wav'},\n    {id: 'X', name: 'tink', src: './clips/tink.wav'},\n    {id: 'C', name: 'tom', src: './clips/tom.wav'},\n]\n","import React from 'react'\n\nimport DrumPad from './DrumPad'\n\nimport { padData } from '../resources/padData'\n\nconst DrumMachine = ({triggered, setTriggered}) => {\n    return (\n        <div id=\"display\">\n            <div className='padsdisplay'>\n                {padData.map(pad => {\n                    return <DrumPad id={pad.id} src={pad.src} key={pad.id} name={pad.name} setTriggered={setTriggered}/>\n                    })\n                }\n\n            </div>\n            <p className='triggered'>{triggered}</p>\n        </div>\n    )\n}\n\nexport default DrumMachine","import React, {useState} from 'react';\nimport './App.css';\nimport DrumMachine from './components/DrumMachine'\n\nfunction App() {\n  const [triggered, setTriggered] = useState('')\n\n  const setAudio = (key) => {\n    const audio = document.getElementById(key)\n    setTriggered(audio.getAttribute('name'))\n    audio.currentTime = 0\n    audio.play()\n  }\n  \n  const handleKeyPress = (e) => {\n    let key = e.key.toUpperCase()\n    switch(key){\n        case \"Q\":\n          setAudio(key)\n          break\n        case \"W\":\n          setAudio(key)\n          break\n        case \"E\":\n          setAudio(key)\n          break\n        case \"A\":\n          setAudio(key)\n          break\n        case \"S\":\n            setAudio(key)\n            break\n        case \"D\":\n            setAudio(key)\n            break\n        case \"Z\":\n            setAudio(key)\n            break\n        case \"X\":\n            setAudio(key)\n            break\n        case \"C\":\n            setAudio(key)\n            break\n        default:\n          return\n    }\n  }\n\n  window.addEventListener(\"keydown\", handleKeyPress)\n\n  return (\n    <div className=\"App\" id=\"drum-machine\">\n      <DrumMachine triggered={triggered} setTriggered={setTriggered}/>\n\n    </div>\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}